#include "CurieIMU.h"
#include "CurieTimerOne.h"

char sinput; int count = 0;

void setup() {
  // INITIALIZE SERIAL
  Serial.begin(115200);
  while (!Serial) {}    // wait to establish serial connection (i.e. monitor)
  Serial.println("Serial initialized! (115200 baud)");

  // INITIALIZE CURIE IMU
  CurieIMU.begin();
  CurieIMU.setAccelerometerRange(2);  // IMU Accelerometer range, 2G
  CurieIMU.setGyroRange(250);         // IMU Gyroscope range, 250 deg/s
  Serial.println("Curie IMU initialized! (Accelerometer 2G; Gyroscope 250 deg/s)");

  // PROMPT FOR INPUT
  Serial.println("Awaiting character input. Type:\n\t'0' for Analog\n\t'1' for Gyroscope\n\t'2' for Accelerometer.");
  while (!Serial.available()) {}
  sinput = Serial.read();
  switch (sinput) {
    case '0':
      CurieTimerOne.start(10001, &ReadAnalog);
      break;
    case '1':
      CurieTimerOne.start(10001, &ReadGyro);
      break;
    case '2':
      CurieTimerOne.start(10001, &ReadAcce);
      break;
  }
}

unsigned long timestart, timelast;
int an0, an1, an2;
float val0, val1, val2;

void ReadIns() {
  an0 = analogRead(A0);
  an1 = analogRead(A1);

  Serial.print(count); Serial.print("\t");  // PRINT ANALOG VALUES
  Serial.print(an0); Serial.print("\t");
  Serial.print(an1); Serial.print("\t");
  count++;
}

void ReadGyro() {
  timelast = micros() - timestart;            // calculate time since last timestamp
  timestart = micros();                       // update timestamp before next read

  CurieIMU.readGyroScaled(val0, val1, val2);  // READ GYROSCOPE INPUT
  Serial.print(count); Serial.print("\t");    // PRINT GYROSCOPE VALUES
  Serial.print(val0); Serial.print("\t");
  Serial.print(val1); Serial.print("\t");
  Serial.print(val2); Serial.print("\t");
  Serial.print("Time since last read: "); Serial.println(timelast);
  count++;
}

void ReadAcce() {
  timelast = micros() - timestart;                    // calculate time since last timestamp
  timestart = micros();                               // update timestamp before next read

  CurieIMU.readAccelerometerScaled(val0, val1, val2); // READ ACCELEROMETER INPUT

  Serial.print(count); Serial.print("\t");            // PRINT ACCELEROMETER VALUES
  Serial.print(val0); Serial.print("\t");
  Serial.print(val1); Serial.print("\t");
  Serial.print(val2); Serial.print("\t");
  Serial.print("Time since last read: "); Serial.println(timelast);
  count++;
}

void loop() {}        // Empty loop will continue to execute while CurieTimerOne runs
