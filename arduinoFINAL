#include "CurieIMU.h"
#include "CurieTimerOne.h"

float ax,ay,az, gx,gy,gz, emg,emgscaled,emgHPF,emgLPF,emgrect,emgbox,emgboxprev;
int shoot=0;

int orientation_before = -1;

int pos = 500;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  while(!Serial);

  CurieIMU.begin();
  CurieIMU.setAccelerometerRange(4);
  CurieIMU.setGyroRange(500);

  CurieTimerOne.start(10000, &accelerometer_reader);

 }

void loop() {
  // put your main code here, to run repeatedly:

  //with usb connection pointing FORWARD

  if (az>0.4 && pos>5){
    //Serial.println("Left");
    orientation_before = 1;
    pos -= 10;
  }

  else if(az<-0.4 && pos <745){
    //Serial.println("Right");
    orientation_before = 0;
    pos += 10;
  }

  if (gx < -475) pos = 744;
  else if (gx>475) pos = 6;

  while(pos>=745) pos -= 1;
  while(pos<=5) pos+=1;

  if ((emgbox>0.099) && (emgboxprev>0.099)) shoot = 1 - shoot;

  Serial.println(pos);
  delay(100);
  Serial.println(shoot);
  delay(50);
}


void accelerometer_reader(){
    CurieIMU.readAccelerometerScaled(ax, ay, az);//read
    CurieIMU.readGyroScaled(gx, gy, gz);

    emgboxprev = emgbox;
    emg = analogRead(A0);

    emgscaled = (float(emg) * 3.3 / 1023 - 1.5) / 3.6; // dividing by 3600 gets volts; dividing by 3.6 gets mV
    emgHPF = thirdorderHPF(emgscaled);
    emgLPF = thirdorderLPF(emgHPF);
    emgrect = abs(emgLPF);
    emgbox = boxcarFilterSample(emgrect);
}

float thirdorderHPF(float sample) {

  static const float a[4] = {1., -2.37409474, 1.92935567, -0.53207537};
  static const float b[4] = {0.72944072, -2.18832217, 2.18832217, -0.72944072};
  // x array for holding recent inputs (newest input as index 0, delay of 1 at index 1, etc.
  static float x[4] = {0};
  // x array for holding recent inputs (newest input as index 0, delay of 1 at index 1, etc.
  static float y[4] = {0};

  x[0] = sample;

  // Calculate the output filtered signal based on a weighted sum of previous inputs/outputs
  y[0] = (b[0]*x[0]+b[1]*x[1]+b[2]*x[2]+b[3]*x[3])-(a[1]*y[1]+a[2]*y[2]+a[3]*y[3]);
  y[0] /= a[0];

  // Shift the input signals by one timestep to prepare for the next call to this function
  x[3] = x[2];
  x[2] = x[1];
  x[1] = x[0];

  // Shift the previously calculated output signals by one time step to prepare for the next call to this function
  y[3] = y[2];
  y[2] = y[1];
  y[1] = y[0];

  return y[0];
}

float thirdorderLPF(float sample) {

  static const float a[4] = {1.0, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17};
  static const float b[4] = {0.16666667, 0.5, 0.5, 0.16666667};
  // x array for holding recent inputs (newest input as index 0, delay of 1 at index 1, etc.
  static float x[4] = {0};
  // x array for holding recent inputs (newest input as index 0, delay of 1 at index 1, etc.
  static float y[4] = {0};

  x[0] = sample;

  // Calculate the output filtered signal based on a weighted sum of previous inputs/outputs
  y[0] = (b[0]*x[0]+b[1]*x[1]+b[2]*x[2]+b[3]*x[3])-(a[1]*y[1]+a[2]*y[2]+a[3]*y[3]);
  y[0] /= a[0];

  // Shift the input signals by one timestep to prepare for the next call to this function
  x[3] = x[2];
  x[2] = x[1];
  x[1] = x[0];

  // Shift the previously calculated output signals by one time step to prepare for the next call to this function
  y[3] = y[2];
  y[2] = y[1];
  y[1] = y[0];

  return y[0];
}

float boxcarFilterSample(float sample) {
  static const int boxcarWidth = 10; // Change this value to alter boxcar length
  static float recentSamples[boxcarWidth] = {0}; // hold onto recent samples
  static int readIndex = 0; // the index of the current reading
  static float total = 0; // the running total
  static float average = 0; // the average

  // subtract the last reading:
  total = total - recentSamples[readIndex];
  // add new sample to list (overwrite oldest sample)
  recentSamples[readIndex] = sample;
  // add the reading to the total:
  total = total + recentSamples[readIndex];
  // advance to the next position in the array:
  readIndex = readIndex + 1;

  // if we're at the end of the array...
  if (readIndex >= boxcarWidth) {
    // ...wrap around to the beginning:
    readIndex = 0;
  }

  // calculate the average:
  average = total / boxcarWidth;
  // send it to the computer as ASCII digits
  return average;
}


static void earthshocku()
{
  if (CurieIMU.getInterruptStatus(CURIE_IMU_TAP)) {
    if (CurieIMU.tapDetected(X_AXIS, NEGATIVE)){
      if(orientation_before)pos -= 100;
      else pos += 100;
    }
    if (CurieIMU.tapDetected(X_AXIS, POSITIVE)){
      if(orientation_before)pos -= 100;
      else pos += 100;
    }
    if (CurieIMU.tapDetected(Y_AXIS, NEGATIVE)){
      if(orientation_before)pos -= 100;
      else pos += 100;
    }
    if (CurieIMU.tapDetected(Y_AXIS, POSITIVE)){
      if(orientation_before)pos -= 100;
      else pos += 100;
    }
    if (CurieIMU.tapDetected(Z_AXIS, NEGATIVE)){
      if(orientation_before)pos -= 100;
      else pos += 100;
    }
    if (CurieIMU.tapDetected(Z_AXIS, POSITIVE)){
      if(orientation_before)pos -= 100;
      else pos += 100;
    }

  }
}
